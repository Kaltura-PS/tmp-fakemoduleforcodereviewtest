<?php

/**
 * Class Awesomemediareport_ReportController
 *
 * Report controller
 */
class Awesomemediareport_ReportController extends Kms_Module_Controller_Abstract
{
    /**
     * Init
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Kms_Helper_Controller_AjaxActions::init($this->_helper, ['index', 'like', 'unlike']);
    }

    /**
     * Header action
     */
    public function headerAction(){}

    /**
     * Index action
     */
    public function indexAction()
    {
        // get request params
        $params = $this->getRequest()->getParams();
        $page = $params['page'];
        $type = $params['type'];
        // get user client
        $client = Kms_Resource_Client::getUserClient();
        // create a base entry filter
        $filter = new Kaltura_Client_Type_BaseEntryFilter();
        $filter->userIdEqual = Kms_Plugin_Access::getId();
        // order by creation date, desc
        $filter->orderBy = Kaltura_Client_Enum_BaseEntryOrderBy::CREATED_AT_DESC;
        // filter by type
        if ($type == 'video') {
            $filter->mediaTypeEqual = Kaltura_Client_Enum_MediaType::VIDEO;
        } elseif ($type == 'audio') {
            $filter->mediaTypeEqual = Kaltura_Client_Enum_MediaType::VIDEO;
        } elseif ($type == 'live') {
            $filter->typeEqual = Kaltura_Client_Enum_EntryType::LIVE_STREAM;
        } elseif ($type == 'image') {
            $filter->mediaTypeEqual = Kaltura_Client_Enum_MediaType::IMAGE;
        } elseif ($type == null) {
            $filter->mediaTypeEqual = Kaltura_Client_Enum_MediaType::VIDEO;
        }
        // create a pager
        $pager = new Kaltura_Client_Type_FilterPager();
        $pager->pageSize = 20;
        $pager->pageIndex = $page;
        // list entries
        $entries = $client->baseEntry->listAction($filter, $pager);
        // iterate over the entries
        /** @var Kaltura_Client_Type_BaseEntry $entry */
        foreach ($entries->objects as $entry) {
            // get liked from the cache
            $liked = self::getLikedFromCache($entry);
            if ($liked == null) {
                // get liked from the API
                $liked = Kaltura_Client_Like_Plugin::get($client)->like->checkLikeExists($entry->id, Kms_Plugin_Access::getId());
                // save liked to the cache
                self::saveLikedToCache($entry, $liked);
            }
            $entry->voted = $liked;
            // create a category entry filter
            $filter = new Kaltura_Client_Type_CategoryEntryFilter();
            $filter->entryIdEqual = $entry->id;
            $filter->categoryFullIdsStartsWith = Kms_Resource_Config::getRootChannelsCategoryFullId();
            // list category entries
            $ces = $client->categoryEntry->listAction($filter, $pager);
            // iterate over category entries
            /** @var Kaltura_Client_Type_CategoryEntry $ce */
            foreach ($ces->objects as $ce) {
                // get the category
                $entry->channels[] = $client->category->get($ce->categoryId);
            }
            // create a category entry filter
            $filter = new Kaltura_Client_Type_CategoryEntryFilter();
            $filter->entryIdEqual = $entry->id;
            $filter->categoryFullIdsStartsWith = Kms_Resource_Config::getRootGalleriesCategoryFullId();
            // list category entries
            $ces = $client->categoryEntry->listAction($filter, $pager);
            // iterate over category entries
            /** @var Kaltura_Client_Type_CategoryEntry $ce */
            foreach ($ces->objects as $ce) {
                // get the category
                $entry->galleries[] = $client->category->get($ce->categoryId);
            }
        }
        // set view params
        $this->view->type = $type;
        $this->view->entries = $entries->objects;
        $this->view->page = $page;
        $this->view->pagesCount = ceil($entries->totalCount / 20);
    }

    /**
     * Get liked from the cache
     *
     * @param $entry - Entry
     * @return bool
     */
    public function getLikedFromCache($entry) {
        return Kms_Resource_Cache::apiGet('awesomemediareport-entrylikedbycurrentuser', array('entryId' => $entry->id));
    }

    /**
     * Save liked to the cache
     *
     * @param $entry - The entry
     * @param $liked - Is liked
     */
    public function saveLikedToCache($entry, $liked) {
        Kms_Resource_Cache::apiSet('awesomemediareport-entrylikedbycurrentuser', array('entryId' => $entry->id), $liked);
    }

    /**
     * Like action
     */
    public function likeAction()
    {
        // get request params
        $params = $this->getRequest()->getParams();
        $entryId = $params['entryId'];
        // get admin client with no entitlements
        $client = Kms_Resource_Client::getAdminClientNoEntitlement();
        // like the entry
        Kaltura_Client_Like_Plugin::get($client)->like->like($entryId);
    }

    /**
     * Unlike action
     */
    public function unlikeAction()
    {
        // get request params
        $params = $this->getRequest()->getParams();
        $entryId = $params['entryId'];
        // get admin client with no entitlements
        $client = Kms_Resource_Client::getAdminClientNoEntitlement();
        // unlike the entry
        Kaltura_Client_Like_Plugin::get($client)->like->unlike($entryId);
    }
}
